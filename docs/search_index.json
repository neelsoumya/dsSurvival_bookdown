[["index.html", "dsSurvival: Privacy preserving survival models in DataSHIELD Chapter 1 Prerequisites", " dsSurvival: Privacy preserving survival models in DataSHIELD Soumya Banerjee and Tom R P Bishop 2021-09-07 Chapter 1 Prerequisites Please install R and R Studio. We assume that the reader is familiar with R and DataSHIELD. DataSHIELD is a platform for federated analysis of private data. DataSHIELD has a client-server architecture and this package has a client side and server side component. The client side package is called dsSurvivalClient: https://github.com/neelsoumya/dsSurvivalClient The server side package is called dsSurvival: https://github.com/neelsoumya/dsSurvival Install R Studio and the development environment as described below: https://data2knowledge.atlassian.net/wiki/spaces/DSDEV/pages/12943461/Getting+started We outline some of the prerequisites that need to be installed below: install.packages(&#39;devtools&#39;) library(devtools) devtools::install_github(&#39;neelsoumya/dsSurvivalClient&#39;) devtools::install_github(&#39;datashield/dsBaseClient@6.1.1&#39;) install.packages(&#39;rmarkdown&#39;) install.packages(&#39;knitr&#39;) install.packages(&#39;tinytex&#39;) install.packages(&#39;metafor&#39;) install.packages(&#39;DSOpal&#39;) install.packages(&#39;DSI&#39;) install.packages(&#39;opalr&#39;) "],["intro.html", "Chapter 2 Introduction 2.1 Survival models", " Chapter 2 Introduction This is a document that outlines a vignette for implementing privacy preserving survival models and meta-analyzing hazard ratios in the DataSHIELD platform. We used the bookdown package (Xie 2021), R Markdown and knitr (Xie 2015) for this document. Our package dsSurvival (Banerjee and Bishop 2021) uses the metafor package for meta-analysis (Viechtbauer 2010). 2.1 Survival models Survival models are used extensively in healthcare. Previously building survival models in DataSHIELD involved building piecewise exponential regression models. This is an approximation and involves having to define appropriate time buckets. A lack of familiarity with this approach also makes people suspicious. The scope of our package implementation is restricted to being study-level meta-analysis (SLMA) rather than full likelihood. References "],["computational-workflow.html", "Chapter 3 Computational workflow 3.1 Creating server-side variables for survival analysis 3.2 Create survival object and call ds.coxph.SLMA() 3.3 Summary of survival objects 3.4 Diagnostics for Cox proportional hazards models 3.5 Meta-analyze hazard ratios", " Chapter 3 Computational workflow The computational steps are outlined below. The first step is connecting to the server and loading the survival data. library(knitr) library(rmarkdown) library(tinytex) library(survival) library(metafor) library(ggplot2) library(dsSurvivalClient) require(&#39;DSI&#39;) require(&#39;DSOpal&#39;) require(&#39;dsBaseClient&#39;) builder &lt;- DSI::newDSLoginBuilder() builder$append(server=&quot;server1&quot;, url=&quot;https://opal-sandbox.mrc-epid.cam.ac.uk&quot;, user=&quot;dsuser&quot;, password=&quot;password&quot;, table = &quot;SURVIVAL.EXPAND_NO_MISSING1&quot;) builder$append(server=&quot;server2&quot;, url=&quot;https://opal-sandbox.mrc-epid.cam.ac.uk&quot;, user=&quot;dsuser&quot;, password=&quot;password&quot;, table = &quot;SURVIVAL.EXPAND_NO_MISSING2&quot;) builder$append(server=&quot;server3&quot;, url=&quot;https://opal-sandbox.mrc-epid.cam.ac.uk&quot;, user=&quot;dsuser&quot;, password=&quot;password&quot;, table = &quot;SURVIVAL.EXPAND_NO_MISSING3&quot;) logindata &lt;- builder$build() connections &lt;- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = &quot;D&quot;) 3.1 Creating server-side variables for survival analysis We now outline the steps for analysing survival data. We show this using synthetic data. There are 3 data sets that are held on the same server but can be considered separate. The cens variable has the event information and the survtime variable has the time information. There is also age and gender information. We will look at how age and gender affect survival time and then meta-analyze the hazard ratios. make sure that the outcome variable is numeric ds.asNumeric(x.name = &quot;D$cens&quot;, newobj = &quot;EVENT&quot;, datasources = connections) ds.asNumeric(x.name = &quot;D$survtime&quot;, newobj = &quot;SURVTIME&quot;, datasources = connections) convert time id variable to a factor ds.asFactor(input.var.name = &quot;D$time.id&quot;, newobj = &quot;TID&quot;, datasources = connections) create in the server-side the log(survtime) variable ds.log(x = &quot;D$survtime&quot;, newobj = &quot;log.surv&quot;, datasources = connections) create start time variable ds.asNumeric(x.name = &quot;D$starttime&quot;, newobj = &quot;STARTTIME&quot;, datasources = connections) ds.asNumeric(x.name = &quot;D$endtime&quot;, newobj = &quot;ENDTIME&quot;, datasources = connections) 3.2 Create survival object and call ds.coxph.SLMA() There are two options to generate the survival object. You can generate it separately or in line. use constructed Surv object in ds.coxph.SLMA() dsSurvivalClient::ds.Surv(time=&#39;STARTTIME&#39;, time2=&#39;ENDTIME&#39;, event = &#39;EVENT&#39;, objectname=&#39;surv_object&#39;, type=&#39;counting&#39;) coxph_model_full &lt;- dsSurvivalClient::ds.coxph.SLMA(formula = &#39;surv_object~D$age+D$female&#39;) use direct inline call to survival::Surv() dsSurvivalClient::ds.coxph.SLMA(formula = &#39;survival::Surv(time=SURVTIME,event=EVENT)~D$age+D$female&#39;, dataName = &#39;D&#39;, datasources = connections) call with survival::strata() The strata() option allows us to relax some of the proportional hazards assumptions. It allows fitting of a separate baseline hazard function within each strata. coxph_model_strata &lt;- dsSurvivalClient::ds.coxph.SLMA(formula = &#39;surv_object~D$age + survival::strata(D$female)&#39;) summary(coxph_model_strata) 3.3 Summary of survival objects We can also summarize a server-side object of type survival::Surv() using a call to ds.coxphSummary(). This will provide a non-disclosive summary of the server-side object. An example call is shown below: dsSurvivalClient::ds.coxphSummary(x = &#39;coxph_serverside&#39;) 3.4 Diagnostics for Cox proportional hazards models We have also created functions to test for the assumptions of Cox proportional hazards models. The functions are shown below: dsSurvivalClient::ds.coxphSLMAassign(formula = &#39;surv_object~D$age+D$female&#39;, objectname = &#39;coxph_serverside&#39;) dsSurvivalClient::ds.cox.zphSLMA(fit = &#39;coxph_serverside&#39;) dsSurvivalClient::ds.coxphSummary(x = &#39;coxph_serverside&#39;) A diagnostic summary is shown below. ## surv_object~D$age+D$female ## Assigned expr. (coxph_serverside &lt;- coxphSLMAassignDS(formula = surv_object ~ D$age + D$female,... ## NULL ## Aggregating study2 (cox.zphSLMADS(&quot;coxph_serverside&quot;, &quot;km&quot;, TRUE, FALSE, TRUE)) [==&gt;---] 50% / 0s Aggregating study3 (cox.zphSLMADS(&quot;coxph_serverside&quot;, &quot;km&quot;, TRUE, FALSE, TRUE)) [===&gt;--] 75% / 0s Aggregated (cox.zphSLMADS(&quot;coxph_serverside&quot;, &quot;km&quot;, TRUE, FALSE, TRUE)) [==============] 100% / 0s ## $study1 ## chisq df p ## D$age 1.022 1 0.31 ## D$female 0.364 1 0.55 ## GLOBAL 1.239 2 0.54 ## ## $study2 ## chisq df p ## D$age -1389.472 1 1.00 ## D$female 0.591 1 0.44 ## GLOBAL -857.492 2 1.00 ## ## $study3 ## chisq df p ## D$age 15.27 1 9.3e-05 ## D$female 8.04 1 0.0046 ## GLOBAL 23.31 2 8.7e-06 ## Aggregating study3 (coxphSummaryDS(&quot;coxph_serverside&quot;)) [=====================&gt;--------] 75% / 0s Aggregated (coxphSummaryDS(&quot;coxph_serverside&quot;)) [======================================] 100% / 0s ## $study1 ## Call: ## survival::coxph(formula = formula, data = dataTable, weights = weights, ## ties = ties, singular.ok = singular.ok, model = model, x = x, ## y = y) ## ## n= 2060, number of events= 426 ## ## coef exp(coef) se(coef) z ## D$age 0.041609 1.042487 0.003498 11.894 ## D$female1 -0.660002 0.516850 0.099481 -6.634 ## Pr(&gt;|z|) ## D$age &lt; 2e-16 *** ## D$female1 3.26e-11 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## D$age 1.0425 0.9592 1.0354 1.0497 ## D$female1 0.5169 1.9348 0.4253 0.6281 ## ## Concordance= 0.676 (se = 0.014 ) ## Likelihood ratio test= 170.7 on 2 df, p=&lt;2e-16 ## Wald test = 168.2 on 2 df, p=&lt;2e-16 ## Score (logrank) test = 166.3 on 2 df, p=&lt;2e-16 ## ## ## $study2 ## Call: ## survival::coxph(formula = formula, data = dataTable, weights = weights, ## ties = ties, singular.ok = singular.ok, model = model, x = x, ## y = y) ## ## n= 1640, number of events= 300 ## ## coef exp(coef) se(coef) z ## D$age 0.04067 1.04151 0.00416 9.776 ## D$female1 -0.62756 0.53389 0.11767 -5.333 ## Pr(&gt;|z|) ## D$age &lt; 2e-16 *** ## D$female1 9.66e-08 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## D$age 1.0415 0.9601 1.0331 1.0500 ## D$female1 0.5339 1.8730 0.4239 0.6724 ## ## Concordance= 0.674 (se = 0.017 ) ## Likelihood ratio test= 117.8 on 2 df, p=&lt;2e-16 ## Wald test = 115.2 on 2 df, p=&lt;2e-16 ## Score (logrank) test = 116.4 on 2 df, p=&lt;2e-16 ## ## ## $study3 ## Call: ## survival::coxph(formula = formula, data = dataTable, weights = weights, ## ties = ties, singular.ok = singular.ok, model = model, x = x, ## y = y) ## ## n= 2688, number of events= 578 ## ## coef exp(coef) se(coef) z ## D$age 0.042145 1.043045 0.003086 13.655 ## D$female1 -0.599238 0.549230 0.084305 -7.108 ## Pr(&gt;|z|) ## D$age &lt; 2e-16 *** ## D$female1 1.18e-12 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## D$age 1.0430 0.9587 1.0368 1.0494 ## D$female1 0.5492 1.8207 0.4656 0.6479 ## ## Concordance= 0.699 (se = 0.011 ) ## Likelihood ratio test= 227.9 on 2 df, p=&lt;2e-16 ## Wald test = 228.4 on 2 df, p=&lt;2e-16 ## Score (logrank) test = 229.4 on 2 df, p=&lt;2e-16 3.5 Meta-analyze hazard ratios We now outline how the hazard ratios from the survival models are meta-analyzed. We use the metafor package for meta-analysis. We show the summary of an example meta-analysis and a forest plot below. The forest plot shows a basic example of meta-analyzed hazard ratios from a survival model (analyzed in dsSurvivalClient). The log-hazard ratios and their standard errors from each study can be found after running ds.coxphSLMA() The hazard ratios can then be meta-analyzed by running the following commands: input_logHR = c(coxph_model_full$study1$coefficients[1,2], coxph_model_full$study2$coefficients[1,2], coxph_model_full$study3$coefficients[1,2]) input_se = c(coxph_model_full$study1$coefficients[1,3], coxph_model_full$study2$coefficients[1,3], coxph_model_full$study3$coefficients[1,3]) metafor::rma(log_hazard_ratio, sei = se_hazard_ratio, method = &#39;REML&#39;) A summary of this meta-analyzed model is shown below. ## ## Random-Effects Model (k = 3; tau^2 estimator: REML) ## ## logLik deviance AIC BIC AICc ## 9.3824 -18.7648 -14.7648 -17.3785 -2.7648 ## ## tau^2 (estimated amount of total heterogeneity): 0 (SE = 0.0000) ## tau (square root of estimated tau^2 value): 0 ## I^2 (total heterogeneity / total variability): 0.00% ## H^2 (total variability / sampling variability): 1.00 ## ## Test for Heterogeneity: ## Q(df = 2) = 0.0880, p-val = 0.9569 ## ## Model Results: ## ## estimate se zval pval ci.lb ci.ub ## 1.0425 0.0020 515.4456 &lt;.0001 1.0385 1.0465 *** ## ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We now show a forest plot with the meta-analyzed hazard ratios. The hazard ratios come from the dsSurvivalClient function ds.coxphSLMA(). Figure 3.1: Example forest plot of meta-analyzed hazard ratios. Finally, once you have finished your analysis, you can disconnect from the server(s) using the following command: DSI::datashield.logout(conns = connections) https://github.com/datashield http://www.metafor-project.org https://github.com/neelsoumya/dsSurvival https://github.com/neelsoumya/dsSurvivalClient "],["summary.html", "Chapter 4 Summary", " Chapter 4 Summary This bookdown shows how to build privacy preserving survival models using dsSurvival in DataSHIELD. You can read more at: https://github.com/neelsoumya/dsSurvivalClient https://github.com/neelsoumya/dsSurvival https://github.com/datashield "],["references.html", "References", " References "]]
